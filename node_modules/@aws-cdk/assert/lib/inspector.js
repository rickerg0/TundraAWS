"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api = require("@aws-cdk/cx-api");
const assertion_1 = require("./assertion");
const match_template_1 = require("./assertions/match-template");
class Inspector {
    constructor() {
        this.aroundAssert = undefined;
    }
    to(assertion) {
        return this.aroundAssert ? this.aroundAssert(() => this._to(assertion))
            : this._to(assertion);
    }
    notTo(assertion) {
        return this.to(assertion_1.not(assertion));
    }
    _to(assertion) {
        assertion.assertOrThrow(this);
    }
}
exports.Inspector = Inspector;
class StackInspector extends Inspector {
    constructor(stack) {
        super();
        this.stack = stack;
        this.template = stack instanceof api.CloudFormationStackArtifact ? stack.template : stack;
    }
    at(path) {
        if (!(this.stack instanceof api.CloudFormationStackArtifact)) {
            throw new Error(`Cannot use "expect(stack).at(path)" for a raw template, only CloudFormationStackArtifact`);
        }
        const strPath = typeof path === 'string' ? path : path.join('/');
        return new StackPathInspector(this.stack, strPath);
    }
    toMatch(template, matchStyle = match_template_1.MatchStyle.EXACT) {
        return this.to(match_template_1.matchTemplate(template, matchStyle));
    }
    get value() {
        return this.template;
    }
}
exports.StackInspector = StackInspector;
class StackPathInspector extends Inspector {
    constructor(stack, path) {
        super();
        this.stack = stack;
        this.path = path;
    }
    get value() {
        // The names of paths in metadata in tests are very ill-defined. Try with the full path first,
        // then try with the stack name preprended for backwards compat with most tests that happen to give
        // their stack an ID that's the same as the stack name.
        const metadata = this.stack.manifest.metadata || {};
        const md = metadata[this.path] || metadata[`/${this.stack.name}${this.path}`];
        if (md === undefined) {
            return undefined;
        }
        const resourceMd = md.find(entry => entry.type === api.LOGICAL_ID_METADATA_KEY);
        if (resourceMd === undefined) {
            return undefined;
        }
        const logicalId = resourceMd.data;
        return this.stack.template.Resources[logicalId];
    }
}
exports.StackPathInspector = StackPathInspector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zcGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zcGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXdDO0FBRXhDLDJDQUFrQztBQUNsQyxnRUFBd0U7QUFFeEUsTUFBc0IsU0FBUztJQUc3QjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxFQUFFLENBQUMsU0FBMEI7UUFDbEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUEwQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUlPLEdBQUcsQ0FBQyxTQUEwQjtRQUNwQyxTQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQXJCRCw4QkFxQkM7QUFFRCxNQUFhLGNBQWUsU0FBUSxTQUFTO0lBSTNDLFlBQTRCLEtBQStDO1FBQ3pFLEtBQUssRUFBRSxDQUFDO1FBRGtCLFVBQUssR0FBTCxLQUFLLENBQTBDO1FBR3pFLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxZQUFZLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVGLENBQUM7SUFFTSxFQUFFLENBQUMsSUFBdUI7UUFDL0IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssWUFBWSxHQUFHLENBQUMsMkJBQTJCLENBQUMsRUFBRTtZQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLDBGQUEwRixDQUFDLENBQUM7U0FDN0c7UUFFRCxNQUFNLE9BQU8sR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRSxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sT0FBTyxDQUFDLFFBQWdDLEVBQUUsVUFBVSxHQUFHLDJCQUFVLENBQUMsS0FBSztRQUM1RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsOEJBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsSUFBVyxLQUFLO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTFCRCx3Q0EwQkM7QUFFRCxNQUFhLGtCQUFtQixTQUFRLFNBQVM7SUFDL0MsWUFBNEIsS0FBc0MsRUFBa0IsSUFBWTtRQUM5RixLQUFLLEVBQUUsQ0FBQztRQURrQixVQUFLLEdBQUwsS0FBSyxDQUFpQztRQUFrQixTQUFJLEdBQUosSUFBSSxDQUFRO0lBRWhHLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCw4RkFBOEY7UUFDOUYsbUdBQW1HO1FBQ25HLHVEQUF1RDtRQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ3BELE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUUsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQUUsT0FBTyxTQUFTLENBQUM7U0FBRTtRQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNoRixJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFBRSxPQUFPLFNBQVMsQ0FBQztTQUFFO1FBQ25ELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNGO0FBakJELGdEQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCB7IEFzc2VydGlvbiB9IGZyb20gJy4vYXNzZXJ0aW9uJztcbmltcG9ydCB7IG5vdCB9IGZyb20gJy4vYXNzZXJ0aW9uJztcbmltcG9ydCB7IE1hdGNoU3R5bGUsIG1hdGNoVGVtcGxhdGUgfSBmcm9tICcuL2Fzc2VydGlvbnMvbWF0Y2gtdGVtcGxhdGUnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5zcGVjdG9yIHtcbiAgcHVibGljIGFyb3VuZEFzc2VydD86IChjYjogKCkgPT4gdm9pZCkgPT4gYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXJvdW5kQXNzZXJ0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHRvKGFzc2VydGlvbjogQXNzZXJ0aW9uPHRoaXM+KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5hcm91bmRBc3NlcnQgPyB0aGlzLmFyb3VuZEFzc2VydCgoKSA9PiB0aGlzLl90byhhc3NlcnRpb24pKVxuICAgICAgICAgICAgICAgICA6IHRoaXMuX3RvKGFzc2VydGlvbik7XG4gIH1cblxuICBwdWJsaWMgbm90VG8oYXNzZXJ0aW9uOiBBc3NlcnRpb248dGhpcz4pOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnRvKG5vdChhc3NlcnRpb24pKTtcbiAgfVxuXG4gIGFic3RyYWN0IGdldCB2YWx1ZSgpOiBhbnk7XG5cbiAgcHJpdmF0ZSBfdG8oYXNzZXJ0aW9uOiBBc3NlcnRpb248dGhpcz4pOiBhbnkge1xuICAgIGFzc2VydGlvbi5hc3NlcnRPclRocm93KHRoaXMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFja0luc3BlY3RvciBleHRlbmRzIEluc3BlY3RvciB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc3RhY2s6IGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QgfCBvYmplY3QpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHN0YWNrIGluc3RhbmNlb2YgYXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCA/IHN0YWNrLnRlbXBsYXRlIDogc3RhY2s7XG4gIH1cblxuICBwdWJsaWMgYXQocGF0aDogc3RyaW5nIHwgc3RyaW5nW10pOiBTdGFja1BhdGhJbnNwZWN0b3Ige1xuICAgIGlmICghKHRoaXMuc3RhY2sgaW5zdGFuY2VvZiBhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlIFwiZXhwZWN0KHN0YWNrKS5hdChwYXRoKVwiIGZvciBhIHJhdyB0ZW1wbGF0ZSwgb25seSBDbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3RgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJQYXRoID0gdHlwZW9mIHBhdGggPT09ICdzdHJpbmcnID8gcGF0aCA6IHBhdGguam9pbignLycpO1xuICAgIHJldHVybiBuZXcgU3RhY2tQYXRoSW5zcGVjdG9yKHRoaXMuc3RhY2ssIHN0clBhdGgpO1xuICB9XG5cbiAgcHVibGljIHRvTWF0Y2godGVtcGxhdGU6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIG1hdGNoU3R5bGUgPSBNYXRjaFN0eWxlLkVYQUNUKSB7XG4gICAgcmV0dXJuIHRoaXMudG8obWF0Y2hUZW1wbGF0ZSh0ZW1wbGF0ZSwgbWF0Y2hTdHlsZSkpO1xuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZSgpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2tQYXRoSW5zcGVjdG9yIGV4dGVuZHMgSW5zcGVjdG9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHN0YWNrOiBhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0LCBwdWJsaWMgcmVhZG9ubHkgcGF0aDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsdWUoKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IHVuZGVmaW5lZCB7XG4gICAgLy8gVGhlIG5hbWVzIG9mIHBhdGhzIGluIG1ldGFkYXRhIGluIHRlc3RzIGFyZSB2ZXJ5IGlsbC1kZWZpbmVkLiBUcnkgd2l0aCB0aGUgZnVsbCBwYXRoIGZpcnN0LFxuICAgIC8vIHRoZW4gdHJ5IHdpdGggdGhlIHN0YWNrIG5hbWUgcHJlcHJlbmRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIG1vc3QgdGVzdHMgdGhhdCBoYXBwZW4gdG8gZ2l2ZVxuICAgIC8vIHRoZWlyIHN0YWNrIGFuIElEIHRoYXQncyB0aGUgc2FtZSBhcyB0aGUgc3RhY2sgbmFtZS5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuc3RhY2subWFuaWZlc3QubWV0YWRhdGEgfHwge307XG4gICAgY29uc3QgbWQgPSBtZXRhZGF0YVt0aGlzLnBhdGhdIHx8IG1ldGFkYXRhW2AvJHt0aGlzLnN0YWNrLm5hbWV9JHt0aGlzLnBhdGh9YF07XG4gICAgaWYgKG1kID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgIGNvbnN0IHJlc291cmNlTWQgPSBtZC5maW5kKGVudHJ5ID0+IGVudHJ5LnR5cGUgPT09IGFwaS5MT0dJQ0FMX0lEX01FVEFEQVRBX0tFWSk7XG4gICAgaWYgKHJlc291cmNlTWQgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgY29uc3QgbG9naWNhbElkID0gcmVzb3VyY2VNZC5kYXRhO1xuICAgIHJldHVybiB0aGlzLnN0YWNrLnRlbXBsYXRlLlJlc291cmNlc1tsb2dpY2FsSWRdO1xuICB9XG59XG4iXX0=